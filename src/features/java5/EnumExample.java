package features.java5;

// The Enum in Java is a data type which contains a fixed set of constants.
// It can be used for days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, and SATURDAY) ,
// directions (NORTH, SOUTH, EAST, and WEST),
// season (SPRING, SUMMER, WINTER, and AUTUMN or FALL),
// colors (RED, YELLOW, BLUE, GREEN, WHITE, and BLACK)


// Enum improve type safety
// Enum can be easily used in switch
// Enum can be traversed
// Enum can have fields, constructors and methods
// Enum may implement many interfaces but cannot extend any class because it internally extends Enum class

// The Java compiler internally adds the values(), valueOf(), ordinal() method when it creates an enum.
// The values() method returns an array containing all the values of the enum.
// The valueOf() method returns the value of given constant enum.
// The ordinal() method returns the index of the enum value.

enum Season {WINTER, SPRING, SUMMER, FALL}

enum Season2 {
    WINTER(5), SPRING(10), SUMMER(15), FALL(20);

    private final int value;

    // Constructor in Enum is private
    Season2 (int value) {
        this.value=value;
    }

    public int getValue() {
        return value;
    }
}

public class EnumExample {
    public static void main(String[] args) {

        System.out.println("----------------Example 1: Enum with ordinal index-----------------------");
        for (Season s: Season.values()) {
            System.out.println(s);
        }
        System.out.println('\n');

        System.out.println("----------------Example 2: Enum with set ordinal-----------------------");
        for (Season2 s: Season2.values()) {
            System.out.println(s + " " + s.getValue());
        }
        System.out.println("Value of WINTER is: " + Season2.valueOf("WINTER"));
        System.out.println("Index of WINTER is: " + Season2.valueOf("WINTER").getValue());
    }
}

// Define of Enum
//enum DayOfWeek {
//    MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);
//    private int value;
//    DayOfWeek(int value) {
//        this.value = value;
//    }
//}

// Internal code generated by the compiler for Enum definition
//final class DayOfWeek extends Enum {
//
//    private int value;
//
//    public static final DayOfWeek MONDAY;
//    public static final DayOfWeek TUESDAY;
//    public static final DayOfWeek WEDNESDAY;
//    public static final DayOfWeek THURSDAY;
//    public static final DayOfWeek FRIDAY;
//    public static final DayOfWeek SATURDAY;
//    public static final DayOfWeek SUNDAY;
//    private static final DayOfWeek[] $VALUES;
//
//    static {
//        MONDAY = new DayOfWeek("MONDAY", 0, 1);
//        TUESDAY = new DayOfWeek("TUESDAY", 1, 2);
//        WEDNESDAY = new DayOfWeek("WEDNESDAY", 2, 3);
//        THURSDAY = new DayOfWeek("THURDAY", 3, 4);
//        FRIDAY = new DayOfWeek("FRIDAY", 4, 5);
//        SATURDAY = new DayOfWeek("SATURDAY", 5, 6);
//        SUNDAY = new DayOfWeek("SUNDAY", 6, 7);
//        $VALUES = (new DayOfWeek[] {
//                MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
//        });
//    }
//
//    private DayOfWeek(String s, int i, int j) {
//        super(s, i);
//        value = j;
//    }
//    public static DayOfWeek[] values() {
//        return $VALUES.clone();
//    }
//    public static DayOfWeek valueOf(String s) {
//        return Enum.valueOf(DayOfWeek, s);
//    }
//
//}